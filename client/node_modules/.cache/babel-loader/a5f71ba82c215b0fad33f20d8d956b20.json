{"ast":null,"code":"import { takeEvery, call } from \"redux-saga/effects\";\nimport actionsTypes from \"./types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nexport function* fetchCollectionsAsync() {\n  const collectionRef = firestore.collection(\"collections\");\n  const snapshot = yield collectionRef.get();\n  const collMap = yield call(convertCollectionsSnapshotToMap, snapshot); //   collectionRef\n  //     .get()\n  //     .then((snapshot) => {\n  //       const collMap = convertCollectionsSnapshotToMap(snapshot);\n  //       dispatch(fetch_collections_success(collMap));\n  //     })\n  //     .catch((err) => dispatch(fetch_collections_failure(err.message)));\n  // };\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(actionsTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/home/karim/E/workplace/e-commerce/src/redux/shop/sagas.js"],"names":["takeEvery","call","actionsTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collMap","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AAEA,OAAOC,YAAP,MAAyB,SAAzB;AACA,SACEC,+BADF,EAEEC,SAFF,QAGO,+BAHP;AAIA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,aAAa,GAAGF,SAAS,CAACG,UAAV,CAAqB,aAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,QAAMC,OAAO,GAAG,MAAMT,IAAI,CAACE,+BAAD,EAAkCK,QAAlC,CAA1B,CAHuC,CAIvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,UAAUG,qBAAV,GAAkC;AACvC,QAAMX,SAAS,CAACE,YAAY,CAACU,uBAAd,EAAuCP,qBAAvC,CAAf;AACD","sourcesContent":["import { takeEvery, call } from \"redux-saga/effects\";\n\nimport actionsTypes from \"./types\";\nimport {\n  convertCollectionsSnapshotToMap,\n  firestore,\n} from \"../../firebase/firebase.utils\";\nexport function* fetchCollectionsAsync() {\n  const collectionRef = firestore.collection(\"collections\");\n  const snapshot = yield collectionRef.get();\n  const collMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n  //   collectionRef\n  //     .get()\n  //     .then((snapshot) => {\n  //       const collMap = convertCollectionsSnapshotToMap(snapshot);\n  //       dispatch(fetch_collections_success(collMap));\n  //     })\n  //     .catch((err) => dispatch(fetch_collections_failure(err.message)));\n  // };\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(actionsTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}